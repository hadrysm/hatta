{"version":3,"sources":["webpack:///./src/pages/about.js","webpack:///./src/components/molecules/HeadlineContent/HeadlineContent.js","webpack:///./src/helpers/index.js"],"names":["aboutHeadline","query","Wrapper","styled","div","theme","mq","bigTablet","AboutSection","section","colors","black","StyledHeadline","Headline","font","size","m","ImageWrapper","StyledImg","Img","AboutPage","data","container","useRef","useEffect","wrapper","current","elements","children","tl","gsap","timeline","defaults","ease","delay","set","scaleX","transformOrigin","to","duration","fromTo","autoAlpha","y","stagger","title","paragraph","ref","fluid","file","childImageSharp","HeadlineContent","node","textSplit","frag","header","text","from","textContent","split","document","createDocumentFragment","forEach","letter","i","span","createElement","style","length","appendChild","Paragraph"],"mappings":"6FAAA,mKAYMA,EACG,QADHA,EAGF,qGAiDSC,EAAK,aAYZC,EAAUC,UAAOC,IAAV,qEAAGD,CAAH,+GAMT,qBAAGE,MAAkBC,GAAGC,aAKtBC,EAAeL,UAAOM,QAAV,0EAAGN,CAAH,iPAOd,qBAAGE,MAAkBC,GAAGC,aAWJ,qBAAGF,MAAkBK,OAAOC,SAY9CC,EAAiBT,kBAAOU,KAAV,4EAAGV,CAAH,oBACL,qBAAGE,MAAkBS,KAAKC,KAAKC,KAGxCC,EAAed,UAAOC,IAAV,0EAAGD,CAAH,8EAKd,qBAAGE,MAAkBC,GAAGC,aAKtBW,EAAYf,kBAAOgB,KAAV,uEAAGhB,CAAH,8CAgBAiB,UAjIG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAYC,iBAAO,MAqBzB,OAnBAC,qBAAU,WACR,IAAMC,EAAUH,EAAUI,QACpBC,EAAWL,EAAUI,QAAQE,SAE7BC,EAAKC,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,aAAcC,MAAO,KAElEJ,IAAKK,IAAIV,EAAS,CAAEW,OAAQ,EAAGC,gBAAiB,SAEhDR,EAAGS,GAAGb,EAAS,CAAEc,SAAU,IAAKH,OAAQ,IAAKI,OAC3Cb,EACA,CACEc,UAAW,EACXC,GAAI,IAEN,CAAEH,SAAU,EAAGE,UAAW,EAAGC,EAAG,EAAGC,QAAS,KAC5C,WAED,CAACrB,IAGF,kBAACpB,EAAD,KACE,kBAAC,IAAD,CAAK0C,MAAM,UACX,6BACE,kBAAC,IAAD,CAAiBA,MAAO5C,EAAqB6C,UAAW7C,IACxD,kBAACQ,EAAD,CAAcsC,IAAKxB,GACjB,kBAAC,IAAD,idAQA,kBAACV,EAAD,6BAGJ,kBAACK,EAAD,KACE,kBAACC,EAAD,CAAW6B,MAAO1B,EAAK2B,KAAKC,gBAAgBF,Y,2GCvB9C7C,EAAUC,UAAOC,IAAV,+EAAGD,CAAH,wGAKT,qBAAGE,MAAkBC,GAAGC,aAWb2C,IAzCS,SAAC,GAA0B,IAAxBN,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC1BvB,EAAYC,iBAAO,MAgBzB,OAdAC,qBAAU,WAAO,ICba2B,EAExBC,EAEAC,EDSU,EACS/B,EAAUI,QAAQE,SAAlC0B,EADO,KACCC,EADD,KAGHzB,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,gBAE1CuB,KAAK,EClBoBL,EDkBFG,EChBtBF,EADkBD,EAAhBM,YACsBC,MAAM,IAE9BL,EAAOM,SAASC,yBACtBR,EAAUS,SAAQ,SAACC,EAAQC,GACzB,IAAMC,EAAOL,SAASM,cAAc,QACpCD,EAAKP,YAAcK,EACnBE,EAAKE,OAAsB,MAAXJ,EAAiB,mBAAqB,IAAtD,aACEV,EAAUe,OAASJ,GADrB,+CAGAV,EAAKe,YAAYJ,MAGnBb,EAAKM,YAAc,KACnBN,EAAKiB,YAAYf,GAEVF,EAAKvB,UDCyB2B,GAAO,CACxChB,SAAU,GACVL,MAAO,EACPO,UAAW,EACXC,GAAI,GACJC,QAAS,OAEV,CAACrB,IAGF,kBAACpB,EAAD,CAAS4C,IAAKxB,GACZ,kBAACT,EAAA,EAAD,KAAW+B,GACX,kBAACyB,EAAA,EAAD,KAAYxB","file":"component---src-pages-about-js-686278ece1b4dbd0789d.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport gsap from 'gsap';\r\nimport Img from 'gatsby-image';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport SEO from 'components/utilities/SEO/SEO';\r\nimport HeadlineContent from 'components/molecules/HeadlineContent/HeadlineContent';\r\nimport Headline from 'components/atoms/Headline/Headline';\r\nimport Paragraph from 'components/atoms/Paragraph/Paragraph';\r\n\r\nconst aboutHeadline = {\r\n  title: 'about',\r\n  paragraph:\r\n    'While artists work from real to the abstract, architects must work from the abstract to the real. ',\r\n};\r\n\r\nconst AboutPage = ({ data }) => {\r\n  const container = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const wrapper = container.current;\r\n    const elements = container.current.children;\r\n\r\n    const tl = gsap.timeline({ defaults: { ease: 'power3.out', delay: 1 } });\r\n\r\n    gsap.set(wrapper, { scaleX: 0, transformOrigin: 'left' });\r\n\r\n    tl.to(wrapper, { duration: 1.5, scaleX: 1 }).fromTo(\r\n      elements,\r\n      {\r\n        autoAlpha: 0,\r\n        y: -60,\r\n      },\r\n      { duration: 1, autoAlpha: 1, y: 0, stagger: 0.15 },\r\n      '-=1.5',\r\n    );\r\n  }, [container]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <SEO title=\"About\" />\r\n      <div>\r\n        <HeadlineContent title={aboutHeadline.title} paragraph={aboutHeadline.paragraph} />\r\n        <AboutSection ref={container}>\r\n          <Paragraph>\r\n            Architectural design is primarily driven by the holistically creative manipulation of\r\n            mass, space, volume, texture, light, shadow, materials, program, and Realistic elements\r\n            such as cost, construction and technology, in order to achieve an end which is\r\n            aesthetic, functional and often artistic. This distinguishes Architecture from\r\n            engineering design, which is usually driven primarily by the creative application of\r\n            mathematical and scientific principles.\r\n          </Paragraph>\r\n          <StyledHeadline>Abigail Donutdough</StyledHeadline>\r\n        </AboutSection>\r\n      </div>\r\n      <ImageWrapper>\r\n        <StyledImg fluid={data.file.childImageSharp.fluid} />\r\n      </ImageWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  {\r\n    file(name: { eq: \"person\" }) {\r\n      childImageSharp {\r\n        fluid(maxWidth: 1200, maxHeight: 1600, quality: 90) {\r\n          ...GatsbyImageSharpFluid_tracedSVG\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mq.bigTablet} {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\nconst AboutSection = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 80rem;\r\n  padding: 2rem 0.5rem;\r\n  margin-bottom: 2rem;\r\n\r\n  ${({ theme }) => theme.mq.bigTablet} {\r\n    padding: 2rem 0;\r\n  }\r\n\r\n  ::after,\r\n  ::before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 4px;\r\n    left: 0;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n  }\r\n\r\n  ::after {\r\n    top: 0;\r\n  }\r\n\r\n  ::before {\r\n    bottom: 0;\r\n  }\r\n`;\r\n\r\nconst StyledHeadline = styled(Headline)`\r\n  font-size: ${({ theme }) => theme.font.size.m};\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  width: 100%;\r\n  max-width: 40rem;\r\n  overflow: hidden;\r\n\r\n  ${({ theme }) => theme.mq.bigTablet} {\r\n    margin: auto 0 auto 3rem;\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled(Img)`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n`;\r\n\r\nAboutPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    file: PropTypes.shape({\r\n      childImageSharp: PropTypes.shape({\r\n        fluid: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.arrayOf(PropTypes.shape({}))]),\r\n      }),\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nexport default AboutPage;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport gsap from 'gsap';\r\nimport styled from 'styled-components';\r\n\r\nimport Headline from 'components/atoms/Headline/Headline';\r\nimport Paragraph from 'components/atoms/Paragraph/Paragraph';\r\n\r\nimport { splitTextToChars } from 'helpers';\r\n\r\nconst HeadlineContent = ({ title, paragraph }) => {\r\n  const container = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const [header, text] = container.current.children;\r\n\r\n    const tl = gsap.timeline({ defaults: { ease: 'power3.out' } });\r\n\r\n    tl.from([splitTextToChars(header), text], {\r\n      duration: 0.4,\r\n      delay: 1,\r\n      autoAlpha: 0,\r\n      y: -60,\r\n      stagger: 0.1,\r\n    });\r\n  }, [container]);\r\n\r\n  return (\r\n    <Wrapper ref={container}>\r\n      <Headline>{title}</Headline>\r\n      <Paragraph>{paragraph}</Paragraph>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 2rem auto 3rem;\r\n  text-align: center;\r\n  max-width: 40rem;\r\n\r\n  ${({ theme }) => theme.mq.bigTablet} {\r\n    text-align: left;\r\n    margin: 5.5rem 0 4rem;\r\n  }\r\n`;\r\n\r\nHeadlineContent.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  paragraph: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default HeadlineContent;\r\n","export const splitTextToChars = node => {\r\n  const { textContent } = node;\r\n  const textSplit = textContent.split('');\r\n\r\n  const frag = document.createDocumentFragment();\r\n  textSplit.forEach((letter, i) => {\r\n    const span = document.createElement('span');\r\n    span.textContent = letter;\r\n    span.style = `${letter === ' ' ? 'min-width: 1rem;' : ''}z-index: ${\r\n      textSplit.length - i\r\n    }; position: relative; display: inline-block;`;\r\n    frag.appendChild(span);\r\n  });\r\n  // eslint-disable-next-line\r\n  node.textContent = null;\r\n  node.appendChild(frag);\r\n\r\n  return node.children;\r\n};\r\n"],"sourceRoot":""}