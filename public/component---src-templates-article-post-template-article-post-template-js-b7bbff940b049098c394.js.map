{"version":3,"sources":["webpack:///./src/templates/ArticlePostTemplate/ArticlePostTemplate.js","webpack:///./src/hooks/useFadeInAnimation.js"],"names":["query","Header","styled","header","theme","colors","white","StyledImg","Img","Author","Paragraph","font","weight","semiBold","StyleHeadline","Headline","size","s","StyledImgContent","Content","div","ArticlePostTemplate","data","datoCmsArticle","title","author","articleContent","image","ref","useFadeInAnimation","fluid","map","item","itemKey","Object","keys","pop","key","id","startPosition","y","containerRef","useRef","useEffect","elements","current","children","tl","gsap","timeline","defaults","ease","duration","delay","set","autoAlpha","to","entries","reduce","acc","stagger"],"mappings":"4FAAA,2IA4CaA,EAAK,YAgCZC,EAASC,UAAOC,OAAV,8EAAGD,CAAH,6NAYD,qBAAGE,MAAkBC,OAAOC,SAGjCC,EAAYL,kBAAOM,KAAV,iFAAGN,CAAH,sFAQTO,EAASP,kBAAOQ,KAAV,8EAAGR,CAAH,sBACK,qBAAGE,MAAkBO,KAAKC,OAAOC,YAG5CC,EAAgBZ,kBAAOa,KAAV,qFAAGb,CAAH,kCAEJ,qBAAGE,MAAkBO,KAAKK,KAAKC,KAGxCC,EAAmBhB,kBAAOM,KAAV,wFAAGN,CAAH,8BAKhBiB,EAAUjB,UAAOkB,IAAV,+EAAGlB,CAAH,oCAmBEmB,UA1Ha,SAAC,GAItB,IAAD,IAHJC,KACEC,eAAkBC,EAEhB,EAFgBA,MAAOC,EAEvB,EAFuBA,OAAQC,EAE/B,EAF+BA,eAAgBC,EAE/C,EAF+CA,MAG7CC,EAAMC,cAEZ,OACE,oCACE,kBAAC5B,EAAD,KACE,kBAACM,EAAD,CAAWuB,MAAOH,EAAMG,QACxB,kBAAC,IAAD,KAAWN,GACX,kBAACf,EAAD,KAASgB,IAGX,kBAACN,EAAD,CAASS,IAAKA,GACXF,EAAeK,KAAI,SAAAC,GAClB,IAAMC,EAAUC,OAAOC,KAAKH,GAAMI,MAClC,OAAQH,GACN,IAAK,mBACH,OAAO,kBAAC,IAAD,CAAWI,IAAKL,EAAKM,IAAKN,EAAKC,IACxC,IAAK,iBACH,OAAO,kBAACnB,EAAD,CAAeuB,IAAKL,EAAKM,IAAKN,EAAKC,IAC5C,IAAK,YACH,OAAO,kBAACf,EAAD,CAAkBmB,IAAKL,EAAKM,GAAIR,MAAOE,EAAKC,GAASH,QAC9D,QACE,OAAO,a,kCCpCrB,8DAGaD,EAAqB,SAACU,QAA+B,IAA/BA,MAAgB,CAAEC,GAAI,KACvD,IAAMC,EAAeC,iBAAO,MAuB5B,OAVAC,qBAAU,WACR,IAAMC,EAAWH,EAAaI,QAAQC,SAEhCC,EAAKC,IAAKC,SAAS,CAAEC,SAAU,CAAEC,KAAM,aAAcC,SAAU,IAAKC,MAAO,OAEjFL,IAAKM,IAAIV,EAAT,eAAqBW,UAAW,GAAMhB,IAEtCQ,EAAGS,GAAGZ,EAAN,eAAkBW,UAAW,GAjBNrB,OAAOuB,QAAQlB,GAAemB,QAAO,SAACC,EAAD,GAAiB,IAAD,EAATtB,EAAS,KAC1E,OAAO,OAAP,UACKsB,IADL,MAEGtB,GAAc,UAARA,EAAkB,EAAI,EAF/B,MAIC,IAYH,CAAwDuB,QAAS,SAChE,CAACnB,IAEGA","file":"component---src-templates-article-post-template-article-post-template-js-b7bbff940b049098c394.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\n\r\nimport Headline from 'components/atoms/Headline/Headline';\r\nimport Paragraph from 'components/atoms/Paragraph/Paragraph';\r\nimport { useFadeInAnimation } from 'hooks/useFadeInAnimation';\r\n\r\nconst ArticlePostTemplate = ({\r\n  data: {\r\n    datoCmsArticle: { title, author, articleContent, image },\r\n  },\r\n}) => {\r\n  const ref = useFadeInAnimation();\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <StyledImg fluid={image.fluid} />\r\n        <Headline>{title}</Headline>\r\n        <Author>{author}</Author>\r\n      </Header>\r\n\r\n      <Content ref={ref}>\r\n        {articleContent.map(item => {\r\n          const itemKey = Object.keys(item).pop();\r\n          switch (itemKey) {\r\n            case 'paragraphContent':\r\n              return <Paragraph key={item.id}>{item[itemKey]}</Paragraph>;\r\n            case 'headingContent':\r\n              return <StyleHeadline key={item.id}>{item[itemKey]}</StyleHeadline>;\r\n            case 'imageData':\r\n              return <StyledImgContent key={item.id} fluid={item[itemKey].fluid} />;\r\n            default:\r\n              return null;\r\n          }\r\n        })}\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query MyQuery($id: String!) {\r\n    datoCmsArticle(id: { eq: $id }) {\r\n      title\r\n      author\r\n      image {\r\n        fluid(maxWidth: 600) {\r\n          ...GatsbyDatoCmsFluid_tracedSVG\r\n        }\r\n      }\r\n      articleContent {\r\n        ... on DatoCmsParagraph {\r\n          id\r\n          paragraphContent\r\n        }\r\n        ... on DatoCmsHeading {\r\n          id\r\n          headingContent\r\n        }\r\n        ... on DatoCmsArticleImage {\r\n          id\r\n          imageData {\r\n            fluid(maxWidth: 600) {\r\n              ...GatsbyDatoCmsFluid_tracedSVG\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n  height: 30vh;\r\n  padding: 0 1rem;\r\n  margin-top: 3rem;\r\n  position: relative;\r\n  background-color: rgba(0, 0, 0, 0.4);\r\n  border-radius: 1rem;\r\n  overflow: hidden;\r\n  color: ${({ theme }) => theme.colors.white};\r\n`;\r\n\r\nconst StyledImg = styled(Img)`\r\n  position: absolute !important;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Author = styled(Paragraph)`\r\n  font-weight: ${({ theme }) => theme.font.weight.semiBold};\r\n`;\r\n\r\nconst StyleHeadline = styled(Headline)`\r\n  margin: 2rem 0;\r\n  font-size: ${({ theme }) => theme.font.size.s};\r\n`;\r\n\r\nconst StyledImgContent = styled(Img)`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  max-width: 80rem;\r\n  margin: 0 auto;\r\n`;\r\n\r\nArticlePostTemplate.propTypes = {\r\n  data: PropTypes.shape({\r\n    datoCmsArticle: PropTypes.shape({\r\n      title: PropTypes.string,\r\n      author: PropTypes.string,\r\n      image: PropTypes.shape({\r\n        fluid: PropTypes.oneOfType([PropTypes.shape({}), PropTypes.arrayOf(PropTypes.shape({}))]),\r\n      }),\r\n\r\n      articleContent: PropTypes.arrayOf(PropTypes.object),\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nexport default ArticlePostTemplate;\r\n","import { useEffect, useRef } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nexport const useFadeInAnimation = (startPosition = { y: -20 }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  const getFinishPosition = () => {\r\n    const finishPosition = Object.entries(startPosition).reduce((acc, [key]) => {\r\n      return {\r\n        ...acc,\r\n        [key]: key === 'scale' ? 1 : 0,\r\n      };\r\n    }, {});\r\n\r\n    return finishPosition;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const elements = containerRef.current.children;\r\n\r\n    const tl = gsap.timeline({ defaults: { ease: 'power3.out', duration: 1.5, delay: 1.5 } });\r\n\r\n    gsap.set(elements, { autoAlpha: 0, ...startPosition });\r\n\r\n    tl.to(elements, { autoAlpha: 1, ...getFinishPosition(), stagger: 0.15 });\r\n  }, [containerRef]);\r\n\r\n  return containerRef;\r\n};\r\n"],"sourceRoot":""}